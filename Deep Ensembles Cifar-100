import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision.datasets import CIFAR100
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

class SimpleCNN(nn.Module):
    def __init__(self, num_classes):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(64 * 8 * 8, 128)
        self.fc2 = nn.Linear(128, num_classes)

    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x)))
        x = self.pool(torch.relu(self.conv2(x)))
        x = torch.flatten(x, 1)
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
])

train_dataset = CIFAR100(root='./data', train=True, download=True, transform=transform)
test_dataset = CIFAR100(root='./data', train=False, download=True, transform=transform)

train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

def train_single_model(train_loader, num_classes, device):
    model = SimpleCNN(num_classes).to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    epochs = 5
    for epoch in range(epochs):
        model.train()
        running_loss = 0.0
        for images, labels in train_loader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        print(f"Epoch {epoch + 1}, Loss: {running_loss / len(train_loader):.4f}")
    return model

def train_deep_ensemble(num_models, train_loader, num_classes, device):
    ensemble_models = []
    for i in range(num_models):
        print(f"Training model {i + 1}/{num_models}...")
        model = train_single_model(train_loader, num_classes, device)
        ensemble_models.append(model)
    return ensemble_models

def evaluate_ensemble(ensemble_models, test_loader, num_classes, device):
    correct = 0
    total = 0
    confidences_correct = []
    confidences_incorrect = []
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = torch.zeros((images.size(0), num_classes)).to(device)
        for model in ensemble_models:
            model.eval()
            with torch.no_grad():
                outputs += torch.softmax(model(images), dim=1)
        outputs /= len(ensemble_models)
        confidences, predictions = torch.max(outputs, dim=1)
        correct_mask = predictions == labels
        incorrect_mask = ~correct_mask
        confidences_correct.extend(confidences[correct_mask].cpu().numpy())
        confidences_incorrect.extend(confidences[incorrect_mask].cpu().numpy())
        correct += correct_mask.sum().item()
        total += labels.size(0)
    accuracy = 100 * correct / total
    print(f"Ensemble Accuracy on CIFAR-100: {accuracy:.2f}%")
    plt.hist(confidences_correct, bins=20, alpha=0.7, label="Correct Predictions")
    plt.hist(confidences_incorrect, bins=20, alpha=0.7, label="Incorrect Predictions")
    plt.xlabel("Confidence")
    plt.ylabel("Frequency")
    plt.title("Confidence Distribution for Deep Ensembles on CIFAR-100")
    plt.legend()
    plt.show()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
num_models = 5
num_classes = 100
ensemble_models = train_deep_ensemble(num_models, train_loader, num_classes, device)
evaluate_ensemble(ensemble_models, test_loader, num_classes, device)
